openapi: 3.0.3
info:
  title: Ebookify
  version: 1.0.0
  description: E-commerce app for books selling
paths:
  /auth/activate-account:
    put:
      operationId: auth_activate_account_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccountVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAccountVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAccountVerification'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccountVerification'
          description: ''
  /auth/login:
    post:
      operationId: auth_login_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/login'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/login'
          description: ''
  /auth/signup:
    post:
      operationId: auth_signup_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreation'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreation'
          description: ''
  /auth/token/refresh:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/token/verify:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /auth/users:
    get:
      operationId: auth_users_retrieve
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreation'
          description: ''
  /book/:
    get:
      operationId: book_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - book
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookSerializers'
          description: ''
    post:
      operationId: book_create
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookSerializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookSerializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookSerializers'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookSerializers'
          description: ''
  /book/{book_id}/:
    get:
      operationId: book_retrieve
      parameters:
      - in: path
        name: book_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this book.
        required: true
      tags:
      - book
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookSerializers'
          description: ''
    put:
      operationId: book_update
      parameters:
      - in: path
        name: book_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this book.
        required: true
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookSerializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookSerializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookSerializers'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookSerializers'
          description: ''
    patch:
      operationId: book_partial_update
      parameters:
      - in: path
        name: book_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this book.
        required: true
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBookSerializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBookSerializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBookSerializers'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookSerializers'
          description: ''
    delete:
      operationId: book_destroy
      parameters:
      - in: path
        name: book_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this book.
        required: true
      tags:
      - book
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
components:
  schemas:
    BookCategoryEnum:
      enum:
      - ROMANCE
      - FICTION
      - DRAMA
      - POLITICS
      - CRIME
      type: string
    BookSerializers:
      type: object
      properties:
        book_id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 225
        book_category:
          $ref: '#/components/schemas/BookCategoryEnum'
        author:
          type: string
          maxLength: 201
        description:
          type: string
          maxLength: 500
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        book_image:
          type: string
          format: uri
        isbn:
          type: string
          maxLength: 100
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_modified:
          type: string
          format: date-time
          readOnly: true
      required:
      - author
      - book_id
      - date_created
      - date_modified
      - description
      - isbn
      - price
      - title
    PatchedBookSerializers:
      type: object
      properties:
        book_id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 225
        book_category:
          $ref: '#/components/schemas/BookCategoryEnum'
        author:
          type: string
          maxLength: 201
        description:
          type: string
          maxLength: 500
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        book_image:
          type: string
          format: uri
        isbn:
          type: string
          maxLength: 100
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_modified:
          type: string
          format: date-time
          readOnly: true
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    UserAccountVerification:
      type: object
      properties:
        username:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 80
        token:
          type: string
          maxLength: 60
        is_verified:
          type: boolean
          readOnly: true
      required:
      - email
      - is_verified
      - token
      - username
    UserCreation:
      type: object
      properties:
        username:
          type: string
          maxLength: 40
        email:
          type: string
          format: email
          maxLength: 80
        password:
          type: string
          writeOnly: true
          minLength: 8
        first_name:
          type: string
          maxLength: 60
        last_name:
          type: string
          maxLength: 60
        address:
          type: string
          maxLength: 150
        phone_number:
          type: string
        token:
          type: string
          readOnly: true
        is_verified:
          type: boolean
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
          title: Date
      required:
      - address
      - date_joined
      - email
      - first_name
      - is_verified
      - last_name
      - password
      - phone_number
      - token
      - username
    login:
      type: object
      properties:
        username:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 80
        password:
          type: string
          writeOnly: true
          minLength: 8
        is_verified:
          type: boolean
          readOnly: true
      required:
      - email
      - is_verified
      - password
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
